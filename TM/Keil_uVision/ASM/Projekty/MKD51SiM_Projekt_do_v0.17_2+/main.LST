C51 COMPILER V9.60.0.0   MAIN                                                              03/05/2021 09:15:40 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          //////////////////////////////////////////////////////////////////////////////////////////
   2          //
   3          // Projekt przykladowy dla symulator MKD51 SiM  w wersji od 0.17
   4          //
   5          //////////////////////////////////////////////////////////////////////////////////////////
   6          //----------------------------------------------------------------------------------------
   7          //////////////////////////////////////////////////////////////////////////////////////////
   8          // ***************  Elementy niezgodnosci sprzetowej symulatora z urzadzeniem MKD51:
   9          // P1.2-P1.5 znajduja sie w symulatorze pod wylaczna kontrola klawiatury matrycowej w trakcie ich odczytu 
             -(na chwile obecna, nie ma potrzeby ustwiania tych bitow na jedynki, co jest konieczne w ukladzie rzeczywistym)
  10          // Wyswietlacz LCD nie obsluguje tworzenia wlasnego zestawu znakow.
  11          // Stan wszystkich LED-ow i wyswietlaczy 7-segm. jest symulowany z okresem 50us i aktualizowany na monitor
             -ze z okresem 25ms dla ledow oraz okresem w zakresie od 50ms do 250 ms (regulowanym potencjometrem "jasnosc") dla modulow
             - 7-seg.
  12          // Wyswietlacz 7-segmentowy symulowany jest w dwoch trybach:
  13          // - dla nie zdefiniowanego symbolu Persistent_7sLED jest tylko jeden rejestr sterujacy katodami wszystkic
             -h modulow 7-segmentowych, bity P1.0 i P1.1 wybieraja numer modulu 7-seg. do zasilenia.
  14          // - dla zdefiniowanego symbolu Persistent_7sLED, kazdy modul 7-seg posiada swoj indywidualny zatrzask (wy
             -bierany bitami P1.0 i P1.1) sterujacy segmentami, wszystkie moduly 7-seg. sa zalaczone.
  15          //////////////////////////////////////////////////////////////////////////////////////////
  16          //----------------------------------------------------------------------------------------
  17          //////////////////////////////////////////////////////////////////////////////////////////
  18          // ***************  Klawiszologia:
  19          // Klawisze od 0 do 5 -> X0:X5
  20          // Klawiatura numeryczna -> klawiatura matrycowa MKD51
  21          // Klawiatrura numeryczna + CTRL -> nastawianie pozycji potencjometrow POT0-POT2
  22          // LMB i ruch mysza na potencjometrze -> zgrubne nastawianie pozycji potencjometru
  23          // LMB+RMB i ruch mysza na potencjometrze -> precyzyjne nastawianie pozycji potencjometru
  24          //////////////////////////////////////////////////////////////////////////////////////////
  25          //----------------------------------------------------------------------------------------
  26          
  27          //Deklaracje rejestrow MCS-51
  28          #include <reg52.h>
  29          //Deklaracje funkcji wbudowanych wspieracjacych sprzetowe operacje MCS-51
  30          #include <intrins.h>
  31          //Dekaracje procedur obslugi LCD
  32          #include "lcd.h"
  33          // Konfiguracja parametrow symulatora
  34          #include "mkd51sim.h"
  35          
  36          
  37          //--------------------------------------------  
  38          // Deklaracje funkcji zaimplementowanych w asemblerze
  39          #define MixedAsm
  40          
  41          #ifdef MixedAsm
  42          void INWERSJAP1_6();
  43          void WAIT_10US(int wait);
  44          unsigned char LONG_PARAM_LIST(long l1,long l2);
  45          #endif
  46          //--------------------------------------------  
  47          
  48          // Deklaracje rejestrow sprzetowych MKD51
  49           unsigned char xdata PTWE _at_ 0x8008;   
  50           unsigned char xdata PTWY _at_ 0x8009;  
C51 COMPILER V9.60.0.0   MAIN                                                              03/05/2021 09:15:40 PAGE 2   

  51           unsigned char xdata PTSEG _at_ 0x8018;   
  52           unsigned char xdata POT0 _at_ 0x8005;  
  53          
  54          //Deklaracja rejestru obslugujacego wyswetlacz graficzny LCD symulatora
  55           unsigned char xdata LCDWRITE _at_ 0x7fff;
  56          #define CLEAR_GRAPH_MEMORY 2
  57          #define COPY_SCREEN 1 
  58          
  59          //Deklaracja zmiannych jednobitowych mapowanych pod wskazanymi bitami
  60          sbit P1_6 = P1^6;  // Mapowowanie 6-tego bitu portu P1
  61          sbit P1_7 = P1^7;  // Mapowowanie 7-tego bitu portu P1
  62          
  63          //Deklaracja lancucha tekstowego przeznaczonego do wyslania do drivera LCD
  64          unsigned char xdata tblcw[]="| OTO PIERWSZY |0    PROGRAM   0";
  65          
  66          //Deklaracje zmiennych pomocniczych
  67          unsigned char  presc=0; // Licznik preskalera czestotliwosci wywolywania podalgorytmu w przerwaniu
  68          unsigned char Modul7Seg=0; // Licznik kontrolujacy multipleksowanie wyswietlaczy 7-seg
  69          unsigned char soundtim=0; // Licznik opoznienia czasowgo wylaczenia buzera
  70          bit flag=0; // Flaga synchornizacji programu glownego z przerwaniem czasowym
  71          
  72          data int ZEZWOLENIE_L8=1; // Zmienna udostepniana w procedurze napisanej w asemblerze
  73          
  74          //Zmienne algorytmu rysujacego kwadrat na wyswietlaczu graficznym symulatora
  75          unsigned int x=30,y=80; // Wspolrzedne polozenia kwadratu
  76          unsigned int xx,yy; // Wspolrzedne generowanych pikseli
  77          char dx=1,dy=-1; // Skladowe wektora predkosci kwadratu
  78          unsigned char xdata * pixel; // Wskaznik do danych piksela
  79          
  80          
  81          //////////////////////////////////////////////////////////////////////////////////////////
  82           
  83          void main(void) {
  84   1      
  85   1      //--------------------------------------------  
  86   1      //Wywolanie funkcji i procedury zdefiniowanej w asemblerze
  87   1      #ifdef MixedAsm
  88   1        PTWY=LONG_PARAM_LIST(0,0x81);
  89   1        WAIT_10US(-50000);
  90   1      #endif
  91   1      //--------------------------------------------  
  92   1         
  93   1      // Konfiguracja peryferiow MCS-51
  94   1        P1=0x3c;    // Ustwienie bitow od 2 do 5 do pracy wejsciowej, wylacznie L8 i buzzera, wybranie modulu W0 7-
             -seg
  95   1        TMOD=1;     // Ustawienie licznika 0 do pracy w trybie 1 i zliczania wewnetrznych impulsow zegarowych o okr
             -esie rownym 1us
  96   1      // Inicjalizacja stanu poczatkowego licznika 0 (-2500 <=> okres do przepelnienia licznika = 2500us)
  97   1        TH0=(-2500)>>8;   // Starszy bajt zwiazany z liczba -2500 zapisany w kodzie U2
  98   1        TL0=(-2500)&0xff; // Mlodszy bajt zwiazany z liczba -2500 zapisany w kodzie U2
  99   1        IE=0x82;      // Odblokowanie przerwan poprzez odblokowanie przerwania od licznika 0 bitem ET0 oraz ustawien
             -ie globalnego zezwolenia na wykonywanie przerwan bitem EA
 100   1        TCON=0x10;      // Uruchomienie licznika poprzez ustawienie bitu TR0
 101   1      // Konfiguracja wyswietalcza alfanumerycznego LCD
 102   1        prglcd();
 103   1      //Pierwsza inicjalizacja pomiaru ADC na kanale 5 - POT0
 104   1         POT0=0;  
 105   1         
 106   1      /////////////////////////////////////////////////////////////////////////////////////////////////////
 107   1      // Glowna petla programu
 108   1      /////////////////////////////////////////////////////////////////////////////////////////////////////
 109   1      
C51 COMPILER V9.60.0.0   MAIN                                                              03/05/2021 09:15:40 PAGE 3   

 110   1        while(1){
 111   2          
 112   2      //--------------------------------------------  
 113   2      // Programowe opoznienia czasowe
 114   2      #ifdef MixedAsm
 115   2       WAIT_10US(-100);
 116   2      #else
              unsigned int delay;
               for(delay=0;delay<200;delay++) _nop_();
              #endif
 120   2      //--------------------------------------------  
 121   2      
 122   2      //Wyslanie lancucha tekstowego na LCD   
 123   2         disptext(tblcw);
 124   2          
 125   2      // Obsluga wyseiwtalacza graficznego LCD symulatora, synchronizowana flaga ustawiona w przerwaniu czasowym
 126   2          if(flag)
 127   2          {
 128   3      //Skasowanie flagi
 129   3          flag=0;
 130   3      //Aktualizacje na LCD polozenia kwadratu kolorowego
 131   3          x+=dx;y+=dy;
 132   3          if(y==0 || y==107) dy=-dy;
 133   3          if(x==0 || x==43) dx=-dx;
 134   3          LCDWRITE=CLEAR_GRAPH_MEMORY;
 135   3      //Rysowanie w buforze LCD kwadratu wypelnionego kolorowym gradientem
 136   3          for(yy=0;yy<20;yy++)
 137   3          { pixel=( unsigned char xdata*) (0xa000+x*3+(y+yy)*64*3);
 138   4              for(xx=0;xx<20;xx++)
 139   4             {*(pixel++)=x*4 ; 
 140   5                *(pixel++)=xx*6+yy*6;
 141   5                *(pixel++)=y*2 ;
 142   5               }
 143   4          }
 144   3      //Kopiowanie bufora LCD na ekran  
 145   3          LCDWRITE=COPY_SCREEN;
 146   3          }
 147   2        }
 148   1      }
 149          //////////////////////////////////////////////
 150          //interrupt 0 <=> EXTERNAL INT  0   0003h
 151          //interrupt 1 <=> TIMER/COUNTER 0   000Bh
 152          //interrupt 2 <=> EXTERNAL INT 1    0013h
 153          //interrupt 3 <=> TIMER/COUNTER 1   001Bh
 154          //interrupt 4 <=> SERIAL PORT       0023h
 155          //interrupt 5 <=> TIMER/COUNTER 2   002Bh
 156          
 157          //Procedura obslugi przerwania od licznika programowalnego 0
 158          void IRT_TIMER0() interrupt 1 {
 159   1        //Reinicjalizacja stanu poczatkowego licznika 0 (-2500 <=> okres do przpelnienia licznika = 2500us)
 160   1        TH0=(-2500)>>8;   // Starszy bajt zwiazany z liczba -2500 zapisany w kodzie U2
 161   1        TL0=(-2500)&0xff;   // Mlodszy bajt zwiazany z liczba -2500 zapisany w kodzie U2
 162   1      
 163   1        flag=1;   // Informacja zwrotna do programu glownego o uplywie czasu 2500us
 164   1      
 165   1      //Preskaler czestotliwosci wywolywania podalgorytmu w przerwaniu, wymuszajacy jego prace z okresm 200*2,5m
             -s=500ms
 166   1        if(++presc==200)
 167   1        { 
 168   2            presc=0; 
 169   2        
 170   2      //--------------------------------------------
C51 COMPILER V9.60.0.0   MAIN                                                              03/05/2021 09:15:40 PAGE 4   

 171   2      // Inwersja diody L8
 172   2      #ifdef MixedAsm
 173   2            INWERSJAP1_6();
 174   2      #else
                    P1_6=!P1_6;
              #endif
 177   2      //--------------------------------------------  
 178   2      // Dyanmiczna modyfikacja lancucha tekstowego     
 179   2            tblcw[16]++;
 180   2            tblcw[16]&=48+7;
 181   2            tblcw[31]=tblcw[16];
 182   2      //Zalaczenie buzzera
 183   2            P1_7=1; 
 184   2            soundtim=30;
 185   2        }
 186   1      //Wylaczenie buzzera z opoznieniem czasowym
 187   1        if(soundtim>0) soundtim--;
 188   1        else P1_7=0;
 189   1        
 190   1      //--------------------------------------------  
 191   1      //Alternatywny tryb pracy wysweitlaczy LED-owych w symulatorze z indywidualnymi zatrzaskami dla kazdego mo
             -dulu 7-seg
 192   1      #ifndef Persistent_7sLED
 193   1      PTSEG=0;
 194   1      #endif
 195   1      //--------------------------------------------  
 196   1      //Implementacja licznika modulo 4 sluzacego do multipleksowania wyswietlaczy 7-seg
 197   1      Modul7Seg=++Modul7Seg&3; 
 198   1      //Wygaszenie segmentow przed zmiana zailania modulu 7-seg
 199   1      PTSEG=0;
 200   1      //Wysterowanie wybranego modulu 7-seg - multipleskowanie
 201   1      P1=(P1&0xfc)|Modul7Seg|0x3c;
 202   1      //Wysterowanie segmentow wyswietlacza 7-seg informacja zbiorcza zwiazana ze stanem multipleksu i przyciska
             -mi MKD51
 203   1      PTSEG=Modul7Seg|(~P1&0x7c)|((~PTWE<<(7-Modul7Seg))&0x80);   
 204   1      //Wysterowanie diod L7-L0 stanem konwersji ADC, zainicjalizowanym przy poprzednim wywolaniu przerwania
 205   1      PTWY=POT0;
 206   1      //Inicjalizacja kolejnego pomiaru ADC na kanale 5 - POT0
 207   1      POT0=0; 
 208   1      } 
 209           


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    511    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     33    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     17    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
